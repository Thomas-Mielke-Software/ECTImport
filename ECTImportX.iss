; Script generated by the Inno Setup Script Wizard.    Version 2 !!!
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AppName=CSV-Import
AppVerName=CSV-Import 5.0
DiskSpanning=no
AppPublisher=tm
AppPublisherURL=http://www.easyct.de
AppSupportURL=http://www.easyct.de
AppUpdatesURL=http://www.easyct.de
DefaultDirName={pf}\EasyCash&Tax\Plugins\CSV-Import
DefaultGroupName=EasyCash
OutputBaseFilename=ECTImportXSetup
OutputDir=D:\Work\ECTImportX\Setup
MinVersion=5.0
; MFC9 greift auf GetFileSizeEx zu, das Win 98 nicht in der kernel.dll hat.
Compression=bzip   
SignTool=vs6

[Files]
Source: .\vcredist_x86.exe; DestDir: {tmp}; Flags: dontcopy; 
; bitte eine aktuelle Visual C++ 2013 Runtime von der Microsoft-Website herunterladen!
Source: .\Release\ECTImportX.ocx; DestDir: {app}; Flags: regserver ignoreversion
Source: .\ECTIFace.dll; DestDir: {app}; Flags: ignoreversion
; ECTIFace nur noch benötigt für GetIniFileName
Source: .\LIZENZ.TXT; DestDir: {app}; Flags: ignoreversion
; veraltete Help Datei nicht mehr: Source: D:\Work\ECTImportX\Release\ECTEImport.hlp; DestDir: {app}; Flags: ignoreversion
Source: .\ECTEImport.htm; DestDir: {app}; Flags: ignoreversion
Source: .\gawk.exe; DestDir: {app}; Flags: ignoreversion
Source: .\button.gif; DestDir: {app}; Flags: ignoreversion

[Registry]
Root: HKLM; Subkey: Software\Tools; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: Software\Tools\EasyCash; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; Flags: uninsdeletekey
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; ValueType: string; ValueName: Aufruf; ValueData: ECTImportX.ECTImportXCtrl.1
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; ValueType: string; ValueName: Beschreibung; ValueData: kann Daten im CSV-Format (Character Separated Values) importieren
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; ValueType: string; ValueName: Bitmap; ValueData: {app}\button.gif
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; ValueType: string; ValueName: Name; ValueData: CSV-Import
Root: HKLM; Subkey: Software\Tools\EasyCash\Plugins\CSV-Import; ValueType: string; ValueName: Typ; ValueData: noscroll

[Languages]
Name: default; MessagesFile: compiler:Languages\German.isl

[Code]
function CheckProcessRunning( aProcName,
                              aProcDesc: string ): boolean;
var
  ShellResult: boolean;
  ResultCode: integer;
  cmd: string;
  sl: TStringList;
  f: string;
  d: string;
begin
  cmd := 'for /f "delims=," %%i ' + 
         'in (''tasklist /FI "IMAGENAME eq ' + aProcName + '" /FO CSV'') ' + 
         'do if "%%~i"=="' + aProcName + '" exit 1'; 
  f := 'CheckProc.cmd';
  d := AddBackSlash( ExpandConstant( '{tmp}' ));
  sl := TStringList.Create;
  sl.Add( cmd );
  sl.Add( 'exit /0' );
  sl.SaveToFile( d + f );
  sl.Free;
  Result := true;
  while ( Result ) do
  begin
    ResultCode := 1;
    ShellResult := Exec( f,
                         '',
                         d, 
                         SW_HIDE, 
                         ewWaitUntilTerminated, 
                         ResultCode );
    Result := ResultCode > 0;
    if Result and 
       ( MsgBox( aProcDesc + ' ist noch aktiv. Das Programm muss beendet werden, um fortzufahren.'#13#10#13#10 + 
                 'Bitte wechseln Sie zu dem Programm, schließen Sie es und drücken auf OK.', 
                 mbConfirmation, 
                 MB_OKCANCEL ) <> IDOK ) then
      Break;
  end;
  DeleteFile( d + f );
end;

// Perform some initializations.  Return False to abort setup
function InitializeSetup: Boolean;
begin
  // Do not use any user defined vars in here such as {app}
  Result := not ( CheckProcessRunning( 'EasyCT.exe',      'EasyCash&Tax' ));
end;


function InitializeUninstall: Boolean;
begin
  Result := not ( CheckProcessRunning( 'EasyCT.exe',      'EasyCash&Tax' ));
end;     

// Installation der VC Laufzeitumgebung

function IsRuntimeInstalled: Boolean;
begin
  Result := False;
  // TODO: here will be a statement that will check whether the runtime is installed
  // and return True if so; see e.g. http://stackoverflow.com/q/11137424/960757
end;
 
function PrepareToInstall(var NeedsRestart: Boolean): string;
var
  ExitCode: Integer;
begin
  // if the runtime is not already installed
  if not IsRuntimeInstalled then
  begin
    // extract the redist to the temporary folder
    ExtractTemporaryFile('vcredist_x86.exe');
    // run the redist from the temp folder; if that fails, return from this handler the error text
    if not Exec(ExpandConstant('{tmp}\vcredist_x86.exe'), '/q:a /c:"VCREDI~3.EXE /q:a /c:""msiexec /i vcredist.msi /qn"" "', '', SW_SHOW, ewWaitUntilTerminated, ExitCode) then
    begin
      // return the error text
      Result := 'Setup failed to install VC++ runtime. Exit code: ' + IntToStr(ExitCode);
      // exit this function; this makes sense only if there are further prerequisites to install; in this
      // particular example it does nothing because the function exits anyway, so it is pointless here
      Exit;
    end;
  end;
end;